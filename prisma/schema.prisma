// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id             Int           @id @default(autoincrement())
  title          String
  content        String
  image          String?
  user           User          @relation(fields: [userId], references: [id]) // 게시글 기능 인가 추가
  userId         Int // 게시글 기능 인가 추가
  ArticleComment Comment[]
  likes          ArticleLike[] // 좋아요 기능 추가
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Product {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  price          Int
  tags           String[]
  images         String[]
  user           User          @relation(fields: [userId], references: [id]) // 상품 기능 인가 추가
  userId         Int // 상품 기능 인가 추가
  ProductComment Comment[]
  likes          ProductLike[] // 좋아요 기능 추가
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  user      User?    @relation(fields: [userId], references: [id]) // 댓글 기능 인가 추가
  userId    Int? // 댓글 기능 인가 추가
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  nickname      String
  image         String?
  password      String
  products      Product[] // 상품 기능 인가 추가
  articles      Article[] // 게시글 기능 인가 추가
  comments      Comment[] // 댓글 기능 인가 추가
  productLikes  ProductLike[] // 좋아요한 상품
  articleLikes  ArticleLike[] // 좋아요한 게시글
  refreshTokens RefreshToken[] // Refresh Token
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Refresh Token 모델 추가
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// 상품 좋아요 모델 추가
model ProductLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // 중복 좋아요 방지
}

// 게시글 좋아요 모델 추가
model ArticleLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())

  @@unique([userId, articleId]) // 중복 좋아요 방지
}
